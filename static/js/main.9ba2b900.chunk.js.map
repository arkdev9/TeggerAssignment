{"version":3,"sources":["components/CoinCard.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["CoinCard","Card","CardHeader","Media","object","middle","src","this","props","coin","symbol","toLowerCase","style","maxWidth","maxHeight","className","name","CardBody","CardText","prefix","thousandSeparator","value","priceUsd","displayType","decimalScale","float","marketCapUsd","vwap24Hr","supply","volumeUsd24Hr","suffix","changePercent24Hr","React","Component","App","state","coins","visor","changeVisor","bind","fetch","then","resp","json","data","setState","catch","reason","console","log","rows","row","cols","i","length","push","Col","Row","Container","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.9ba2b900.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n\tCard,\n\tCardHeader,\n\tCardBody,\n\tCardText,\n\tMedia\n} from \"reactstrap\";\nimport NumberFormat from \"react-number-format\";\n\nclass CoinCard extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<Card>\n\t\t\t\t<CardHeader>\n\t\t\t\t\t<Media\n\t\t\t\t\t\tobject\n\t\t\t\t\t\tmiddle\n\t\t\t\t\t\tsrc={\"https://static.coincap.io/assets/icons/\" + this.props.coin.symbol.toLowerCase() + \"@2x.png\"}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tmaxWidth: \"40px\",\n\t\t\t\t\t\t\tmaxHeight: \"40px\"\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName=\"mr-2\"\n\t\t\t\t\t/>\n\t\t\t\t\t{this.props.coin.symbol} - {this.props.coin.name}\n\t\t\t\t</CardHeader>\n\t\t\t\t<CardBody>\n\t\t\t\t\t<CardText>\n\t\t\t\t\t\t{/* TODO: Truncate the digits and suffix billions or millions, etc... */}\n\t\t\t\t\t\tPrice: <NumberFormat\n\t\t\t\t\t\t\tprefix={\"$\"}\n\t\t\t\t\t\t\tthousandSeparator={true}\n\t\t\t\t\t\t\tvalue={this.props.coin.priceUsd}\n\t\t\t\t\t\t\tdisplayType={\"text\"}\n\t\t\t\t\t\t\tdecimalScale={2}\n\t\t\t\t\t\t\tstyle={{ float: \"right\" }} />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\tMarket Cap: <NumberFormat\n\t\t\t\t\t\t\tprefix={\"$\"}\n\t\t\t\t\t\t\tthousandSeparator={true}\n\t\t\t\t\t\t\tvalue={this.props.coin.marketCapUsd}\n\t\t\t\t\t\t\tdisplayType={\"text\"}\n\t\t\t\t\t\t\tdecimalScale={2}\n\t\t\t\t\t\t\tstyle={{ float: \"right\" }} />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\tVWAP: <NumberFormat\n\t\t\t\t\t\t\tprefix={\"$\"}\n\t\t\t\t\t\t\tthousandSeparator={true}\n\t\t\t\t\t\t\tvalue={this.props.coin.vwap24Hr}\n\t\t\t\t\t\t\tdisplayType={\"text\"}\n\t\t\t\t\t\t\tdecimalScale={2}\n\t\t\t\t\t\t\tstyle={{ float: \"right\" }} />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\tSupply: <NumberFormat\n\t\t\t\t\t\t\tprefix={\"$\"}\n\t\t\t\t\t\t\tthousandSeparator={true}\n\t\t\t\t\t\t\tvalue={this.props.coin.supply}\n\t\t\t\t\t\t\tdisplayType={\"text\"}\n\t\t\t\t\t\t\tdecimalScale={2}\n\t\t\t\t\t\t\tstyle={{ float: \"right\" }} />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\tVolume: <NumberFormat\n\t\t\t\t\t\t\tprefix={\"$\"}\n\t\t\t\t\t\t\tthousandSeparator={true}\n\t\t\t\t\t\t\tvalue={this.props.coin.volumeUsd24Hr}\n\t\t\t\t\t\t\tdisplayType={\"text\"}\n\t\t\t\t\t\t\tdecimalScale={2}\n\t\t\t\t\t\t\tstyle={{ float: \"right\" }} />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\tChange: <NumberFormat\n\t\t\t\t\t\t\tsuffix={\"%\"}\n\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\tthis.props.coin.changePercent24Hr > 0 ? \"text-success\" : \"text-danger\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthousandSeparator={true}\n\t\t\t\t\t\t\tvalue={this.props.coin.changePercent24Hr}\n\t\t\t\t\t\t\tdisplayType={\"text\"}\n\t\t\t\t\t\t\tdecimalScale={2}\n\t\t\t\t\t\t\tstyle={{ float: \"right\" }} />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t</CardText>\n\t\t\t\t</CardBody>\n\t\t\t</Card>\n\t\t);\n\t}\n}\n\n\n\nexport default CoinCard;","import React from 'react';\nimport { Container, Row, Col, Button } from 'reactstrap';\nimport CoinCard from \"./CoinCard\";\n\nclass App extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tcoins: [],\n\t\t\tvisor: 3\n\t\t}\n\n\t\tthis.changeVisor = this.changeVisor.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch(\"https://api.coincap.io/v2/assets\")\n\t\t\t.then((resp) => {\n\t\t\t\treturn resp.json()\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tcoins: data.data\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((reason) => {\n\t\t\t\tconsole.log(\"Couldn't fetch coins because -> \" + reason);\n\t\t\t})\n\t}\n\n\tchangeVisor() {\n\t\tthis.setState({\n\t\t\t...this.state,\n\t\t\tvisor: this.state.visor === 3 ? 4 : 3\n\t\t});\n\t}\n\n\trender() {\n\t\tlet rows = [];\n\t\tlet row = [];\n\t\t// md-3 if 4 cols, else md-4 for 3 cols\n\t\tlet cols = \"md-\" + (this.state.visor === 4 ? \"3\" : \"4\");\n\t\tfor (let i = 0; i < this.state.coins.length; i++) {\n\t\t\trow.push(<Col className={cols} ><CoinCard coin={this.state.coins[i]}></CoinCard></Col>);\n\t\t\tif (i % this.state.visor === this.state.visor - 1) {\n\t\t\t\trows.push(<Row className=\"mt-2 mb-2\">{row}</Row>);\n\t\t\t\trow = [];\n\t\t\t}\n\t\t}\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col className=\"text-center\">\n\t\t\t\t\t\t<Button onClick={this.changeVisor}>Change Visor Length to {this.state.visor === 3 ? \"4\" : \"3\"}</Button>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t{rows}\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}